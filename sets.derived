First Set
Non-Terminal Symbol First Set
(   (
)   )
String  String
ε   ε
+   +
-   -
*   *
/   /
^   ^
%   %
..  ..
<   <
<=  <=
>   >
>=  >=
==  ==
~=  ~=
and and
or  or
;   ;
nil nil
false   false
true    true
Number  Number
... ...
,   ,
[   [
]   ]
=   =
Name    Name
end end
.   .
:   :
function    function
return  return
break   break
do  do
while   while
repeat  repeat
until   until
if  if
then    then
for for
local   local
elseif  elseif
in  in
else    else
{   {
}   }
not not
#   #
args    (, String, {
args_s  ε, nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
binop   +, -, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or
chunk_c ε, do, while, repeat, if, for, function, local, Name, (
chunk_s1    ;, ε
chunk_s2    ε, return, break
exp nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
exp_1   ε, +, -, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or
explist_c   ε, nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
field   [, Name, nil, false, true, Number, String, ..., function, {, (, -, not, #
fieldlist_c ε, ,, ;
fieldlist_s ε, ,, ;
fieldsep    ,, ;
funcbody    (
funcbody_s  ε, ..., Name
funcname    Name
funcname_c  ., ε
funcname_s  :, ε
functioncall_prefixexp  :, (, String, {
functiondef function
laststat    return, break
laststat_s  ε, nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
namelist    Name
namelist_c  ,, ε
parlist ..., Name
parlist_s   ,, ε
prefixexp   Name, (
prefixexp_1 [, ., :, ε, (, String, {
stat    do, while, repeat, if, for, function, local, Name, (
stat_c  elseif, ε
stat_for    Name
stat_local  function, Name
stat_s1 else, ε
stat_s2 ,, ε
stat_s3 =, ε
tableconstructor    {
tableconstructor_s  ε, [, Name, nil, false, true, Number, String, ..., function, {, (, -, not, #
unop    -, not, #
var Name, (
var_prefixexp   [, .
varlist_c   ,, ε
functioncall    Name, (
varlist Name, (
explist ε, nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
fieldlist   [, Name, nil, false, true, Number, String, ..., function, {, (, -, not, #
chunk   ε, do, while, repeat, if, for, function, local, Name, (, return, break
block   ε, do, while, repeat, if, for, function, local, Name, (, return, break

Follow Set
Non-Terminal Symbol Follow Set
block   $, end, elseif, until, then, do, while, repeat, if, for, function, local, Name, (, return, break, else
args    [, ., :, (, String, {, +, -, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or, ], ,, nil, false, true, Number, ..., function, Name, not, #, then, do, ), while, repeat, if, for, local, ;, return, break, $, end, elseif, until, else, }
args_s  )
binop   nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
chunk   $, end, elseif, until, then, do, while, repeat, if, for, function, local, Name, (, return, break, else
chunk_c return, break, $, end, elseif, until, then, do, while, repeat, if, for, function, local, Name, (, else
chunk_s1    do, while, repeat, if, for, function, local, Name, (, return, break, $, end, elseif, until, then, else
chunk_s2    $, end, elseif, until, then, do, while, repeat, if, for, function, local, Name, (, return, break, else
exp ], ,, nil, false, true, Number, String, ..., function, {, Name, (, -, not, #, then, do, ), +, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or, while, repeat, if, for, local, ;, return, break, $, end, elseif, until, else, }
exp_1   ], ,, nil, false, true, Number, String, ..., function, {, Name, (, -, not, #, then, do, ), +, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or, while, repeat, if, for, local, ;, return, break, $, end, elseif, until, else, }
explist do, while, repeat, if, for, function, local, Name, (, ;, ), return, break, $, end, elseif, until, then, else
explist_c   nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
field   ,, ;, }
fieldlist   }
fieldlist_c ,, ;, }
fieldlist_s }
fieldsep    [, Name, nil, false, true, Number, String, ..., function, {, (, -, not, #, }
funcbody    do, while, repeat, if, for, function, local, Name, (, ;, +, -, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or, return, break, $, end, elseif, until, then, else, ], ,, nil, false, true, Number, String, ..., {, not, #, ), }
funcbody_s  )
funcname    (
funcname_c  :, (
funcname_s  (
functioncall    do, while, repeat, if, for, function, local, Name, (, ;, return, break, $, end, elseif, until, then, else
functioncall_prefixexp  do, while, repeat, if, for, function, local, Name, (, ;, return, break, $, end, elseif, until, then, else
functiondef +, -, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or, ], ,, nil, false, true, Number, String, ..., function, {, Name, (, not, #, then, do, ), while, repeat, if, for, local, ;, return, break, $, end, elseif, until, else, }
laststat    ;, $, end, elseif, until, then, do, while, repeat, if, for, function, local, Name, (, return, break, else
laststat_s  ;, $, end, elseif, until, then, do, while, repeat, if, for, function, local, Name, (, return, break, else
namelist    =, in, ,, do, while, repeat, if, for, function, local, Name, (, ;, return, break, $, end, elseif, until, then, else, )
namelist_c  =, in, ,, do, while, repeat, if, for, function, local, Name, (, ;, return, break, $, end, elseif, until, then, else, )
parlist )
parlist_s   )
prefixexp   [, ., :, (, String, {, +, -, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or, ], ,, nil, false, true, Number, ..., function, Name, not, #, then, do, ), while, repeat, if, for, local, ;, return, break, $, end, elseif, until, else, }
prefixexp_1 [, ., :, (, String, {, +, -, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or, ], ,, nil, false, true, Number, ..., function, Name, not, #, then, do, ), while, repeat, if, for, local, ;, return, break, $, end, elseif, until, else, }
stat    do, while, repeat, if, for, function, local, Name, (, ;, return, break, $, end, elseif, until, then, else
stat_c  then, else
stat_for    do, while, repeat, if, for, function, local, Name, (, ;, return, break, $, end, elseif, until, then, else
stat_local  do, while, repeat, if, for, function, local, Name, (, ;, return, break, $, end, elseif, until, then, else
stat_s1 end
stat_s2 do
stat_s3 do, while, repeat, if, for, function, local, Name, (, ;, return, break, $, end, elseif, until, then, else
tableconstructor    +, -, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or, ], ,, nil, false, true, Number, String, ..., function, {, Name, (, not, #, then, do, ), while, repeat, if, for, local, ;, [, ., :, return, break, $, end, elseif, until, else, }
tableconstructor_s  }
unop    nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
var ,, =
var_prefixexp   ,, =
varlist =
varlist_c   =

Predict Set
#   Expression  Predict
1   block → chunk   do, while, repeat, if, for, function, local, Name, (, return, break
2   args → ( args_s )   (
3   args → tableconstructor {
4   args → String   String
5   args_s → explist    nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
6   args_s → ε  )
7   binop → +   +
8   binop → -   -
9   binop → *   *
10  binop → /   /
11  binop → ^   ^
12  binop → %   %
13  binop → ..  ..
14  binop → <   <
15  binop → <=  <=
16  binop → >   >
17  binop → >=  >=
18  binop → ==  ==
19  binop → ~=  ~=
20  binop → and and
21  binop → or  or
22  chunk → chunk_c chunk_s2    do, while, repeat, if, for, function, local, Name, (, return, break
23  chunk_c → stat chunk_s1 chunk_c do, while, repeat, if, for, function, local, Name, (
24  chunk_c → ε return, break, $, end, elseif, until, then, do, while, repeat, if, for, function, local, Name, (, else
25  chunk_s1 → ;    ;
26  chunk_s1 → ε    do, while, repeat, if, for, function, local, Name, (, return, break, $, end, elseif, until, then, else
27  chunk_s2 → laststat chunk_s1    return, break
28  chunk_s2 → ε    $, end, elseif, until, then, do, while, repeat, if, for, function, local, Name, (, return, break, else
29  exp → nil exp_1 nil
30  exp → false exp_1   false
31  exp → true exp_1    true
32  exp → Number exp_1  Number
33  exp → String exp_1  String
34  exp → ... exp_1 ...
35  exp → functiondef exp_1 function
36  exp → prefixexp exp_1   Name, (
37  exp → tableconstructor exp_1    {
38  exp → unop exp exp_1    -, not, #
39  exp_1 → binop exp exp_1 +, -, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or
40  exp_1 → ε   , ,, nil, false, true, Number, String, ..., function, {, Name, (, -, not, #, then, do, ), +, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or, while, repeat, if, for, local, ;, return, break, $, end, elseif, until, else, }
41  explist → explist_c exp nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
42  explist_c → exp , explist_c nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
43  explist_c → ε   nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
44  field → [ exp ] = exp   
45  field → Name = exp  Name
46  field → exp nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
47  fieldlist → field fieldlist_c fieldlist_s   , Name, nil, false, true, Number, String, ..., function, {, (, -, not, #
48  fieldlist_c → fieldsep field fieldlist_c    ,, ;
49  fieldlist_c → ε ,, ;, }
50  fieldlist_s → fieldsep  ,, ;
51  fieldlist_s → ε }
52  fieldsep → ,    ,
53  fieldsep → ;    ;
54  funcbody → ( funcbody_s ) block end (
55  funcbody_s → parlist    ..., Name
56  funcbody_s → ε  )
57  funcname → Name funcname_c funcname_s   Name
58  funcname_c → . Name funcname_c  .
59  funcname_c → ε  :, (
60  funcname_s → : Name :
61  funcname_s → ε  (
62  functioncall → prefixexp functioncall_prefixexp Name, (
63  functioncall_prefixexp → args   (, String, {
64  functioncall_prefixexp → : Name args    :
65  functiondef → function funcbody function
66  laststat → return laststat_s    return
67  laststat → break    break
68  laststat_s → explist    nil, false, true, Number, String, ..., function, {, Name, (, -, not, #
69  laststat_s → ε  ;, $, end, elseif, until, then, do, while, repeat, if, for, function, local, Name, (, return, break, else
70  namelist → Name namelist_c  Name
71  namelist_c → , Name namelist_c  ,
72  namelist_c → ε  =, in, ,, do, while, repeat, if, for, function, local, Name, (, ;, return, break, $, end, elseif, until, then, else, )
73  parlist → namelist parlist_s    Name
74  parlist → ...   ...
75  parlist_s → , ...   ,
76  parlist_s → ε   )
77  prefixexp → Name prefixexp_1    Name
78  prefixexp → ( exp ) prefixexp_1 (
79  prefixexp_1 → [ exp ] prefixexp_1   
80  prefixexp_1 → . Name prefixexp_1    .
81  prefixexp_1 → args prefixexp_1  (, String, {
82  prefixexp_1 → : Name args prefixexp_1   :
83  prefixexp_1 → ε , ., :, (, String, {, +, -, *, /, ^, %, .., <, <=, >, >=, ==, ~=, and, or, , ,, nil, false, true, Number, ..., function, Name, not, #, then, do, ), while, repeat, if, for, local, ;, return, break, $, end, elseif, until, else, }
84  stat → varlist = explist    Name, (
85  stat → functioncall Name, (
86  stat → do block end do
87  stat → while exp do block end   while
88  stat → repeat block until exp   repeat
89  stat → if exp then block stat_c stat_s1 end if
90  stat → for stat_for for
91  stat → function funcname funcbody   function
92  stat → local stat_local local
93  stat_c → elseif exp then block stat_c   elseif
94  stat_c → ε  then, else
95  stat_for → Name = exp , exp stat_s2 do block end    Name
96  stat_for → namelist in explist do block end Name
97  stat_local → function Name funcbody function
98  stat_local → namelist stat_s3   Name
99  stat_s1 → else block    else
100 stat_s1 → ε end
101 stat_s2 → , exp ,
102 stat_s2 → ε do
103 stat_s3 → = explist =
104 stat_s3 → ε do, while, repeat, if, for, function, local, Name, (, ;, return, break, $, end, elseif, until, then, else
105 tableconstructor → { tableconstructor_s }   {
106 tableconstructor_s → fieldlist  , Name, nil, false, true, Number, String, ..., function, {, (, -, not, #
107 tableconstructor_s → ε  }
108 unop → -    -
109 unop → not  not
110 unop → #    #
111 var → Name  Name
112 var → prefixexp var_prefixexp   Name, (
113 var_prefixexp → [ exp ] 
114 var_prefixexp → . Name  .
115 varlist → var varlist_c Name, (
116 varlist_c → , var varlist_c ,
117 varlist_c → ε   =

LL(1) Parsing Table
On the LL(1) Parsing Table's Meaning and Construction
The top row corresponds to the columns for all the potential terminal symbols, augmented with $ to represent the end of the parse.
The leftmost column and second row are all zero filled, to accomodate the way Fischer and LeBlanc wrote their parser's handling of abs().
The remaining rows correspond to production rules in the original grammar that you typed in.
Each entry in that row maps the left-hand-side (LHS) of a production rule onto a line-number. That number is the line in which the LHS had that specific column symbol in its predict set.
If a terminal is absent from a non-terminal's predict set, an error code is placed in the table. If that terminal is in follow(that non-terminal), the error is a POP error. Else, it's a SCAN error.

POP error code = # of predict table productions + 1

SCAN error code = # of predict table productions + 2

In practice, you'd want to tear the top, label row off of the table and stick it in a comment, so that you can make sense of your table. The remaining table can be used as is.

LL(1) Parsing Table as JSON (for Easy Import)
[[0,"(",")","String","+","-","*","/","^","%","..","<","<=",">",">=","==","~=","and","or",";","nil","false","true","Number","...",",","[","]","=","Name","end",".",":","function","return","break","do","while","repeat","until","if","then","for","local","elseif","in","else","{","}","not","#","$"],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,1,118,119,119,1,1,1,1,1,1,118,1,118,1,1,118,119,118,119,119,119,119,118],[0,2,118,4,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,118,3,118,118,118,118],[0,5,6,5,119,5,119,119,119,119,119,119,119,119,119,119,119,119,119,119,5,5,5,5,5,119,119,119,119,5,119,119,119,5,119,119,119,119,119,119,119,119,119,119,119,119,119,5,119,5,5,119],[0,118,119,118,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,119,118,118,118,118,118,119,119,119,119,118,119,119,119,118,119,119,119,119,119,119,119,119,119,119,119,119,119,118,119,118,118,119],[0,22,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,22,118,119,119,22,22,22,22,22,22,118,22,118,22,22,118,119,118,119,119,119,119,118],[0,24,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,24,24,119,119,24,24,24,24,24,24,24,24,24,24,24,24,119,24,119,119,119,119,24],[0,26,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,25,119,119,119,119,119,119,119,119,119,26,26,119,119,26,26,26,26,26,26,26,26,26,26,26,26,119,26,119,119,119,119,26],[0,28,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,28,28,119,119,28,28,28,28,28,28,28,28,28,28,28,28,119,28,119,119,119,119,28],[0,36,118,33,118,38,118,118,118,118,118,118,118,118,118,118,118,118,118,118,29,30,31,32,34,118,119,118,119,36,118,119,119,35,118,118,118,118,118,118,118,118,118,118,118,119,118,37,118,38,38,118],[0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,119,40,119,40,40,119,119,40,40,40,40,40,40,40,40,40,40,40,40,119,40,40,40,40,40,40],[0,41,118,41,119,41,119,119,119,119,119,119,119,119,119,119,119,119,119,118,41,41,41,41,41,119,119,119,119,41,118,119,119,41,118,118,118,118,118,118,118,118,118,118,118,119,118,41,119,41,41,118],[0,43,119,43,119,43,119,119,119,119,119,119,119,119,119,119,119,119,119,119,43,43,43,43,43,119,119,119,119,43,119,119,119,43,119,119,119,119,119,119,119,119,119,119,119,119,119,43,119,43,43,119],[0,46,119,46,119,46,119,119,119,119,119,119,119,119,119,119,119,119,119,118,46,46,46,46,46,118,44,119,119,46,119,119,119,46,119,119,119,119,119,119,119,119,119,119,119,119,119,46,118,46,46,119],[0,47,119,47,119,47,119,119,119,119,119,119,119,119,119,119,119,119,119,119,47,47,47,47,47,119,47,119,119,47,119,119,119,47,119,119,119,119,119,119,119,119,119,119,119,119,119,47,118,47,47,119],[0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,49,119,119,119,119,119,49,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,49,119,119,119],[0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,50,119,119,119,119,119,50,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,51,119,119,119],[0,118,119,118,119,118,119,119,119,119,119,119,119,119,119,119,119,119,119,53,118,118,118,118,118,52,118,119,119,118,119,119,119,118,119,119,119,119,119,119,119,119,119,119,119,119,119,118,118,118,118,119],[0,54,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,118,119,118,118,119,119,118,118,118,118,118,118,118,118,118,118,118,118,119,118,118,118,118,118,118],[0,119,56,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,55,119,119,119,119,55,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119],[0,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,57,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119],[0,59,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,58,59,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119],[0,61,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,60,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119],[0,62,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118,119,119,119,119,119,119,119,119,119,62,118,119,119,118,118,118,118,118,118,118,118,118,118,118,118,119,118,119,119,119,119,118],[0,63,119,63,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118,119,119,119,119,119,119,119,119,119,118,118,119,64,118,118,118,118,118,118,118,118,118,118,118,118,119,118,63,119,119,119,118],[0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,118,119,118,118,119,119,65,118,118,118,118,118,118,118,118,118,118,118,119,118,118,118,118,118,118],[0,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118,119,119,119,119,119,119,119,119,119,118,118,119,119,118,66,67,118,118,118,118,118,118,118,118,118,119,118,119,119,119,119,118],[0,69,119,68,119,68,119,119,119,119,119,119,119,119,119,119,119,119,119,69,68,68,68,68,68,119,119,119,119,69,69,119,119,69,69,69,69,69,69,69,69,69,69,69,69,119,69,68,119,68,68,69],[0,118,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118,119,119,119,119,119,118,119,119,118,70,118,119,119,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,118],[0,72,72,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,72,119,119,119,119,119,72,119,119,72,72,72,119,119,72,72,72,72,72,72,72,72,72,72,72,72,72,72,119,119,119,119,72],[0,119,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,74,119,119,119,119,73,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119],[0,119,76,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,75,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119],[0,78,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,77,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,118,118,118,118,118,118],[0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,119,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,119,83,83,83,83,83,83],[0,85,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118,119,119,119,119,119,119,119,119,119,85,118,119,119,91,118,118,86,87,88,118,89,118,90,92,118,119,118,119,119,119,119,118],[0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,94,119,119,93,119,94,119,119,119,119,119],[0,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118,119,119,119,119,119,119,119,119,119,96,118,119,119,118,118,118,118,118,118,118,118,118,118,118,118,119,118,119,119,119,119,118],[0,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118,119,119,119,119,119,119,119,119,119,98,118,119,119,97,118,118,118,118,118,118,118,118,118,118,118,119,118,119,119,119,119,118],[0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,100,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,99,119,119,119,119,119],[0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,101,119,119,119,119,119,119,119,119,119,119,102,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119],[0,104,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,104,119,119,119,119,119,119,119,119,103,104,104,119,119,104,104,104,104,104,104,104,104,104,104,104,104,119,104,119,119,119,119,104],[0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,118,105,118,118,118,118],[0,106,119,106,119,106,119,119,119,119,119,119,119,119,119,119,119,119,119,119,106,106,106,106,106,119,106,119,119,106,119,119,119,106,119,119,119,119,119,119,119,119,119,119,119,119,119,106,107,106,106,119],[0,118,119,118,119,108,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118,118,118,118,118,119,119,119,119,118,119,119,119,118,119,119,119,119,119,119,119,119,119,119,119,119,119,118,119,109,110,119],[0,112,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118,119,119,118,112,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119],[0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118,113,119,118,119,119,114,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119],[0,115,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118,115,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119],[0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,116,119,119,117,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119]]
LL(1) Parsing Push-Map (as JSON)
This structure maps each production rule in the expanded grammar (seen as the middle column in the predict table above) to a series of states that the LL parser pushes onto the stack.

{"1":[5],"2":[-2,3,-1],"3":[41],"4":[-3],"5":[11],"7":[-4],"8":[-5],"9":[-6],"10":[-7],"11":[-8],"12":[-9],"13":[-10],"14":[-11],"15":[-12],"16":[-13],"17":[-14],"18":[-15],"19":[-16],"20":[-17],"21":[-18],"22":[8,6],"23":[6,7,34],"25":[-19],"27":[7,26],"29":[10,-20],"30":[10,-21],"31":[10,-22],"32":[10,-23],"33":[10,-3],"34":[10,-24],"35":[10,25],"36":[10,32],"37":[10,41],"38":[10,9,43],"39":[10,9,4],"41":[9,12],"42":[12,-25,9],"44":[9,-28,-27,9,-26],"45":[9,-28,-29],"46":[9],"47":[16,15,13],"48":[15,13,17],"50":[17],"52":[-25],"53":[-19],"54":[-30,1,-2,19,-1],"55":[30],"57":[22,21,-29],"58":[21,-29,-31],"60":[-29,-32],"62":[24,32],"63":[2],"64":[2,-29,-32],"65":[18,-33],"66":[27,-34],"67":[-35],"68":[11],"70":[29,-29],"71":[29,-29,-25],"73":[31,28],"74":[-24],"75":[-24,-25],"77":[33,-29],"78":[33,-2,9,-1],"79":[33,-27,9,-26],"80":[33,-29,-31],"81":[33,2],"82":[33,2,-29,-32],"84":[11,-28,46],"85":[23],"86":[-30,1,-36],"87":[-30,1,-36,9,-37],"88":[9,-39,1,-38],"89":[-30,38,35,1,-41,9,-40],"90":[36,-42],"91":[18,20,-33],"92":[37,-43],"93":[35,1,-41,9,-44],"95":[-30,1,-36,39,9,-25,9,-28,-29],"96":[-30,1,-36,11,-45,28],"97":[18,-29,-33],"98":[40,28],"99":[1,-46],"101":[9,-25],"103":[11,-28],"105":[-48,42,-47],"106":[14],"108":[-5],"109":[-49],"110":[-50],"111":[-29],"112":[45,32],"113":[-27,9,-26],"114":[-29,-31],"115":[47,44],"116":[47,44,-25]}